/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2020-2022 tools4j.org (Marco Terzer, Anton Anufriev)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package org.tools4j.elara.app.handler;

import org.tools4j.elara.command.Command;
import org.tools4j.elara.event.Event;
import org.tools4j.elara.route.EventRouter;

/**
 * Command processor that translates incoming commands into events without modifying application state.
 * <p>
 * When processing a command one or multiple events can be {@link EventRouter#routingEvent() routed}; an auto-commit
 * event is generated by the system if command processing routes no events.  In some situations commands can be
 * {@link EventRouter#skipCommand() skipped} if event routing shall explicitly be prevented.  Note however that such
 * commands may be re-processed in some situations e.g. during an application fail-over.  Skipping commands can be a
 * useful mechanism to translate high-frequency commands into lower-frequency events if many of the commands have no
 * impact on the system outcome and state.
 * <p>
 * Note that it is important that command processing only reads but does not modify application state -- doing so would
 * break the deterministic nature of event sourcing applications.  Instead, application state is modified when events
 * are {@link EventApplier#onEvent(Event) applied}.  Note however that event applying happens right after routing of an
 * event, hence the updated application state is already accessible by the time subsequent events are routed even within
 * the same command processing invocation.
 */
@FunctionalInterface
public interface CommandProcessor {
    /**
     * Invoked to process the given command, with {@code router} to route one or multiple events.  If no event is
     * routed, the system generates an auto-commit event unless the command is explicitly
     * {@link EventRouter#skipCommand() skipped}.
     *
     * @param command the command to process
     * @param router  router to route events
     */
    void onCommand(Command command, EventRouter router);

    /** Processor does nothing; note that a commit event will still be auto-generated by the system */
    CommandProcessor NOOP = (command, router) -> {};

    /** Processor that routes an event with type and payload identical to the command */
    CommandProcessor ROUTE_EVENT_WITH_COMMAND_PAYLOAD = (cmd, rte) -> rte.routeEventWithCommandPayload(cmd.type());
}
