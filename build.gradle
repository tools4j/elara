/*
The MIT License (MIT)

Copyright (c) 2020 tools4j.org (Marco Terzer, Anton Anufriev)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */
buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'idea'
    id 'io.freefair.javadoc-links' version '4.1.6' apply false
    id 'biz.aQute.bnd.builder' version '5.0.0' apply false
    id "com.github.hierynomus.license" version "0.15.0" apply false
}

defaultTasks 'clean', 'build'

def projGroup = 'org.tools4j'
def projVersion = file('version.txt').text.trim()

def nobarkVersion = '1.5'
def agronaVersion = '1.3.0'
def chronicleVersion = '5.17.43'
def slf4jVersion = '1.7.30'
def checkstyleVersion = '8.28'
def junitVersion = '5.6.1'
def mockitoVersion = '3.3.3'
def hdrHistogramVersion = '2.1.12'

ext {
    isReleaseVersion = !projVersion.endsWith('-SNAPSHOT')
    releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'

    println name + " version=" + projVersion + " release=" + isReleaseVersion

    if (!project.hasProperty('ossrhUsername')) {
        ossrhUsername = ''
    }

    if (!project.hasProperty('ossrhPassword')) {
        ossrhPassword = ''
    }
}

def projectPom = {
    name = 'elara'
    packaging = 'pom'
    // optionally artifactId can be defined here
    description = 'Efficient, zero garbage framework to implement event sourcing applications'
    url = 'https://github.com/tools4j/elara'

    scm {
        connection = 'scm:git:https://github.com/tools4j/elara.git'
        developerConnection = 'scm:git:https://github.com/tools4j/elara.git'
        url = 'https://github.com/tools4j/elara.git'
    }

    licenses {
        license {
            name = 'The MIT License (MIT)'
            url = 'https://opensource.org/licenses/MIT'
        }
    }

    developers {
        developer {
            id = 'terzerm'
            name = 'Marco Terzer'
            email = 'terzerm@gmail.com'
            url = 'https://github.com/terzerm'
        }
        developer {
            id = 'anton-anufriev'
            name = 'Antun Anufriev'
            email = 'anufriev@gmail.com'
            url = 'https://github.com/anton-anufriev'
        }
    }
}

jar.enabled = false

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'license'
    //apply plugin: 'io.freefair.javadoc-links'

    dependencies {
        testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
        testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    }

    group = projGroup
    version = projVersion

    tasks.withType(Sign) {
        onlyIf {
            isReleaseVersion && gradle.taskGraph.hasTask(tasks.publish)
        }
    }

    tasks.withType(Jar) {
        enabled = true
        includeEmptyDirs = false
    }

    tasks.withType(JavaCompile) {
        if (JavaVersion.current().isJava9Compatible()) {
            options.compilerArgs.addAll(['--add-exports', 'java.base/java.lang.reflect=ALL-UNNAMED'])
            options.compilerArgs.addAll(['--add-exports', 'java.base/java.net=ALL-UNNAMED'])
            options.compilerArgs.addAll(['--add-exports', 'java.base/sun.nio.ch=ALL-UNNAMED'])
            options.compilerArgs.addAll(['--add-exports', 'java.base/jdk.internal.ref=ALL-UNNAMED'])
            options.compilerArgs.addAll(['--add-exports', 'jdk.unsupported/sun.misc=ALL-UNNAMED'])
        }
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    tasks.withType(Test) {
        if (JavaVersion.current().isJava9Compatible()) {
            jvmArgs('--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED')
            jvmArgs('--add-opens', 'java.base/java.net=ALL-UNNAMED')
            jvmArgs('--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED')
            jvmArgs('--add-opens', 'java.base/jdk.internal.ref=ALL-UNNAMED')
            jvmArgs('--add-opens', 'java.base/java.util.zip=ALL-UNNAMED')
            jvmArgs('--add-exports', 'jdk.unsupported/sun.misc=ALL-UNNAMED')
        }

        useJUnitPlatform {
            excludeTags 'slow'
        }

        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }

        reports.html.enabled = false // Disable individual test reports
    }

    task slowTest(type: Test) {
        maxParallelForks = 1

        useJUnitPlatform {
            includeTags 'slow'
        }
    }

    license {
        header rootProject.file('etc/LICENSE.template')
        strictCheck true
        include "**/*.java"
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
    }

    compileJava.dependsOn licenseFormat

    javadoc {
        title = '<h1>Elara Event Sourcing</h1>'
        options.bottom = '<i>Copyright &#169; 2020 tools4j.org (Marco Terzer, Anton Anufriev). All Rights Reserved.</i>'
        options.encoding = 'UTF-8'
        options.docEncoding = 'UTF-8'
        options.charSet = 'UTF-8'
        if (JavaVersion.current().isJava10Compatible()) {
            options.addBooleanOption 'html5', true
        }
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        archiveClassifier.set "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    configurations {
        tests
    }

    artifacts {
        tests testJar
    }
}

project(':elara-core') {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'biz.aQute.bnd.builder'
    apply plugin: 'io.freefair.javadoc-links'

    dependencies {
        api "org.agrona:agrona:${agronaVersion}"
        api "org.tools4j:tools4j-nobark:${nobarkVersion}"
    }

    jar {
        bnd """
            Automatic-Module-Name:  org.tools4j.elara-core
            Bundle-Name:            org.tools4j.elara-core
            Bundle-SymbolicName:    org.tools4j.elara-core
            Implementation-Title:   Elara
            Implementation-Vendor:  tools4j.org
            Implementation-Version: ${projVersion}
            -exportcontents: org.tools4j.elara, org.tools4j.elara.*
            # Suppress headers that reduce reproducibility.
            -reproducible: true
            -noextraheaders: true
        """
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        publications {
            elaraCore(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }

        repositories {
            maven {
                url = !isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

    signing {
        sign publishing.publications.elaraCore
    }
}

project(':elara-chronicle') {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'biz.aQute.bnd.builder'

    dependencies {
        api project(':elara-core')
        api "net.openhft:chronicle-queue:${chronicleVersion}"
        testRuntimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"
    }

    jar {
        bnd """
            Automatic-Module-Name:  org.tools4j.elara-chronicle
            Bundle-Name:            org.tools4j.elara-chronicle
            Bundle-SymbolicName:    org.tools4j.elara-chronicle
            Implementation-Title:   Elara
            Implementation-Vendor:  tools4j.org
            Implementation-Version: ${projVersion}
            -exportcontents: org.tools4j.elara, org.tools4j.elara.*
            # Suppress headers that reduce reproducibility.
            -reproducible: true
            -noextraheaders: true
        """
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        publications {
            elaraChronicle(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }

        repositories {
            maven {
                url = !isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

    signing {
        sign publishing.publications.elaraChronicle
    }
}

project(':elara-samples') {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    dependencies {
        api project(':elara-core')
        api project(':elara-chronicle')
        implementation "org.hdrhistogram:HdrHistogram:${hdrHistogramVersion}"
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        publications {
            elaraSamples(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }

        repositories {
            maven {
                url = !isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

    signing {
        sign publishing.publications.elaraSamples
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all sub-projects
    reportOn subprojects*.test
}

task copyCrashLogs(type: Copy) {
    from '.'
    include '**/hs_err*.log'
    include 'LICENSE'
    into 'build/crash_logs'

    includeEmptyDirs = false
}

wrapper {
    gradleVersion = '6.1.1'
    distributionType = 'ALL'
}